using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace dgv_core_select
{
    public partial class MainForm : Form
    {
        public MainForm()
        {
            InitializeComponent();
        }
        protected override void OnHandleCreated(EventArgs e)
        {
            base.OnHandleCreated(e);
            if (!(DesignMode || _isHandleInitialized))
            {
                _isHandleInitialized = true;
                initDataGridView();
            }
        }
        private bool _isHandleInitialized;

        private void initDataGridView()
        {
            dataGridView1.DataSource = Students;
            // Add one or more Student records to autogenerate columns
            foreach (var student in MockDatabaseQuery())
            {
                Students.Add(student);
            }

            // Swap autogenerated column for DataGridViewComboboxColumn.
            int index = dataGridView1.Columns[nameof(Student.Age)].Index;
            dataGridView1.Columns.RemoveAt(index);
            var comboBoxColumn = new DataGridViewComboBoxColumn
            {
                Name = nameof(Student.Age),
                DataPropertyName = nameof(Student.Age),
                DataSource = new string[]{
                    "Select","15 and Under","16","17","18","19","20","21","22","23","24","25 and Older"
                }
            };
            dataGridView1.Columns.Insert(index, comboBoxColumn);
            // Format columns
            dataGridView1.Columns[nameof(Student.ID)].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            dataGridView1.Columns[nameof(Student.Name)].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            dataGridView1.Columns[nameof(Student.Age)].Width = 160;
            // Prevents leaving the row in Edit state When the combo box changes
            dataGridView1.CurrentCellDirtyStateChanged += onCurrentCellDirtyStateChanged;
        }
        BindingList<Student> Students { get; } = new BindingList<Student>();

        private void onCurrentCellDirtyStateChanged(object sender, EventArgs e)
        {
            switch (dataGridView1.Columns[dataGridView1.CurrentCell.ColumnIndex].Name)
            {
                case nameof(Student.Age):
                    dataGridView1.EndEdit();
                    break;
            }
        }

        private IEnumerable<Student> MockDatabaseQuery()
        {
            return new List<Student>
            { 
                new Student { Name = "Katherine Johnson" },
                new Student { Name = "Dorothy Vaughan" },
                new Student { Name = "Mary Jackson" },
                new Student { Name = "Ken Thompson" },
                new Student { Name = "Alan Turing" },
                new Student { Name = "Ada Lovelace" },
                new Student { Name = "Linus Torvalds" },
                new Student { Name = "Mark Zuckerberg" },
                new Student { Name = "Bill Gates" },
                new Student { Name = "Larry Page" },
            };
        }
    }

    class Student
    {
        static int _id = 1;
        public int ID { get; } = _id++;
        public string Name { get; set; }
        public string Age { get; set; } = "Select";
    }
}
